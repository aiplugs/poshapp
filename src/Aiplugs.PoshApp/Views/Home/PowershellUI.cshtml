<template id="powershell-ui-component">
    <div class="d-flex" style="width:100%">
        <PowershellStatus></PowershellStatus>
        <span class="flex-grow-1"></span>
        <PowershellUIPrompt></PowershellUIPrompt>
        <PowershellUIPromptForChoice></PowershellUIPromptForChoice>
        <PowershellUIPromptForCredential></PowershellUIPromptForCredential>
        <PowershellProgress></PowershellProgress>
        <PowershellUIlog></PowershellUILog>
        <PowershellErrorLog></PowershellErrorLog>
    </div>
</template>
<script>
    Vue.component('powershellui', {
        template: '#powershell-ui-component',
    })
</script>

<template id="powershell-ui-prompt-component">
    <v-dialog v-model="dialog" max-width="600px" persistent>
        <v-card>
            <v-card-title class="headline" primary-title>
                {{caption}}
            </v-card-title>
            <v-card-text>
                <p style="white-space: pre-wrap">{{message}}</p>
                <v-form ref="form" v-model="valid">
                    <div v-for="(desc, index) in descriptions" :key="index">
                        <v-text-field ref="fields"
                                      :label="desc.label||desc.name" 
                                      :data-name="desc.name"
                                      :hint="desc.helpMessage"
                                      :rules="rules(desc)"
                                      :required="desc.isMandatory"
                                      v-model="value[desc.name]"
                                      v-if="textfieldTypes.includes(desc.parameterTypeFullName)"></v-text-field>
                        <v-menu
                            v-model="menu[desc.name+'date']"
                            :close-on-content-click="false"
                            :nudge-right="40"
                            transition="scale-transition"
                            offset-y
                            min-width="290px"
                            v-if="desc.parameterTypeFullName == 'System.DateTime'">
                            <template v-slot:activator="{ on }">
                            <v-text-field
                                :label="(desc.label||desc.name) + ' Date'" 
                                :hint="desc.helpMessage"
                                :rules="rules(desc)"
                                :required="desc.isMandatory"
                                v-model="value[desc.name+'date']"
                                readonly
                                v-on="on"
                            ></v-text-field>
                            </template>
                            <v-date-picker v-model="value[desc.name+'date']" v-on:input="menu[desc.name+'date'] = false"></v-date-picker>
                        </v-menu>
                        <v-menu
                            v-model="menu[desc.name+'time']"
                            :close-on-content-click="false"
                            :nudge-right="40"
                            transition="scale-transition"
                            offset-y
                            min-width="290px"
                            v-if="desc.parameterTypeFullName == 'System.DateTime'">
                            <template v-slot:activator="{ on }">
                            <v-text-field
                                :label="(desc.label||desc.name) + ' Time'" 
                                :hint="desc.helpMessage"
                                :rules="rules(desc)"
                                :required="desc.isMandatory"
                                v-model="value[desc.name+'time']"
                                readonly
                                v-on="on"
                            ></v-text-field>
                            </template>
                            <v-time-picker v-model="value[desc.name+'time']" v-on:input="menu[desc.name+'time'] = false"></v-date-picker>
                        </v-menu>
                    </div>
                </v-form>
            </v-card-text>
            <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn :disabled="!valid" v-on:click="handlePrompt">OK</v-btn>
            </v-card-actions>
        </v-card>
    </v-dialog>
</template>
<script type="module">
    import {createCliXml} from '/js/clixml.js'

    Vue.component('powershelluiprompt', {
        template: '#powershell-ui-prompt-component',
        data() {
            return {
                dialog: false,
                caption: null,
                message: null,
                descriptions: [],
                valid: false,
                value: {},
                menu: {},
                textfieldTypes: ['System.String','System.Int32','System.Int64','System.Float','System.Double','System.Decimal']
            }
        },
        methods: {
            rules(desc) {
                const result = [];
                const label = desc.label||desc.name;

                if (desc.isMandatory)
                    result.push(v => !!v || `${label} is required`);

                if (desc.parameterTypeFullName == 'System.Int32'
                 || desc.parameterTypeFullName == 'System.Int64')
                    result.push(v => parseInt(v) !== NaN || `${label} need integer value`)
                
                if (desc.parameterTypeFullName == 'System.Float'
                 || desc.parameterTypeFullName == 'System.Double'
                 || desc.parameterTypeFullName == 'System.Decimal')
                    result.push(v => parseInt(v) !== NaN || `${label} need number value`)
                
                return result;
            },
            handlePrompt() {
                const model = {};
                for (let desc of this.descriptions) {
                    let value = null;
                    if (desc.parameterTypeFullName == 'System.DateTime') {
                        const date = this.value[desc.name+'date'];
                        const time = this.value[desc.name+'time'];
                        value = new Date(`${date} ${time}`).toJSON();
                    }
                    else {
                       value = this.value[desc.name];
                    }
                    model[desc.name] = createCliXml(desc.parameterTypeFullName, value);
                }
                this.$signalr.invoke('Prompt', model);
                this.dialog = false;
            }
        },
        mounted() {
            this.$signalr.on('Prompt', (caption, message, descriptions) => {
                this.caption = caption;
                this.message = message;
                this.descriptions.splice(0, this.descriptions.length, ...descriptions);
                for (let desc of this.descriptions) {
                    this.$set(this.value, desc.name, desc.defaultValue);
                }
                this.dialog = true;
                this.$refs.form.reset();
            })
        }
    })
</script>

<template id="powershell-ui-prompt-for-choice-component">
    <v-dialog v-model="dialog" max-width="600px" persistent>
        <v-card>
            <v-card-title class="headline" primary-title>
                {{caption}}
            </v-card-title>
            <v-card-text>
                <p style="white-space: pre-wrap">{{message}}</p>
                <table>
                    <tr v-for="(choice, index) in choices" :key="index">
                        <td>{{format(choice.label)}}</td><td>{{choice.helpMessage}}</td>
                    </tr>
                </table>
            </v-card-text>
            <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn v-for="(choice, index) in choices" 
                       :key="index" 
                       :color="index==defaultChoice?'primary':null"
                       v-on:click="select(index)">
                    {{format(choice.label)}}
                </v-btn>
            </v-card-actions>
        </v-card>
    </v-dialog>
</template>
<script>
    Vue.component('powershelluipromptforchoice', {
        template: '#powershell-ui-prompt-for-choice-component',
        data() {
            return {
                dialog: false,
                caption: null,
                message: null,
                choices: [],
                defaultChoice: 0
            }
        },
        methods: {
            format(label) {
                return (label||'').replace(/&/, '');
            },
            select(index) {
                this.$signalr.invoke('PromptForChoice', index);
                this.dialog = false;
            }
        },
        mounted() {
            this.$signalr.on('PromptForChoice', (caption, message, choices, defaultChoice) => {
                this.caption = caption;
                this.message = message;
                this.choices.splice(0, this.choices.length, ...choices);
                this.defaultChoice = defaultChoice;
                this.dialog = true;
            })
        }
    })
</script>

<template id="powershell-ui-prompt-for-credential-component">
    <v-dialog v-model="dialog" max-width="600px" persistent>
        <v-card>
            <v-card-title class="headline grey lighten-2" primary-title>
                {{caption}}
            </v-card-title>
            <v-card-text>
                <v-container>
                    <p style="white-space: pre-wrap">{{message}}</p>
                    <v-form ref="form" v-model="valid">
                        <v-text-field 
                            label="Username" 
                            v-model="username" 
                            :rules="[v => !!v || 'Username is required']"
                            required></v-text-field>
                        <v-text-field 
                            label="Password" 
                            type="password" 
                            v-model="password" 
                            :rules="[v => !!v || 'Password is required']"
                            required></v-text-field>
                    </v-form>
                </v-container>
            </v-card-text>

            <v-divider></v-divider>

            <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn color="primary"
                    v-on:click="handlePromptForCredential"
                    :disabled="!valid">
                    OK
                </v-btn>
            </v-card-actions>
        </v-card>
    </v-dialog>
</template>
<script>
    Vue.component('powershelluipromptforcredential', {
        template: '#powershell-ui-prompt-for-credential-component',
        data() {
            return {
                dialog: false,
                caption: null,
                message: null,
                username: null,
                password: null,
                valid: false,
            }
        },
        methods: {
            async handlePromptForCredential() {
                await this.$signalr.invoke("PromptForCredential", this.username, this.password);
                this.dialog = false;
                this.valid = true;
            }
        },
        mounted() {
            this.$signalr.on("PromptForCredential", (caption, message, userName, targetName) => {
                this.dialog = true;
                this.caption = caption;
                this.message = message;
                this.$refs.form.reset();
                this.username = userName;
                this.password  = null;
            })
            this.$signalr.on("PromptForCredentialWithType", (caption, message, userName, targetName, allowedCredentialTypes) => {
                this.dialog = true;
                this.caption = caption;
                this.message = message;
                this.$refs.form.reset();
                this.username = userName;
                this.password  = null;
            })
            this.$signalr.on("WriteDebugLine", value => {
                console.log(value);
            })
            this.$signalr.on("WriteVerboseLine", value => {
                console.log(value);
            })
            this.$signalr.on("WriteWarningLine", value => {
                console.log(value);
            })
        }
    })
</script>

<template id="powershell-error-log-component">
    <v-dialog v-model="dialog" max-width="600px">
        <v-card>
            <v-card-title class="headline red--text">
                Error
            </v-card-title>
            <v-card-text style="white-space: pre-wrap">{{message}}</v-card-text>
            <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn text v-on:click="dialog = false">
                    CLOSE
                </v-btn>
            </v-card-actions>
        </v-card>
    </v-dialog>
</template>
<script>
    Vue.component('powershellerrorlog', {
        template: '#powershell-error-log-component',
        data() {
            return {
                dialog: false,
                message: null
            }
        },
        methods: {
            format(text) {
                return text.replace(/\r\n/g, '\n').split('\n').filter(line => !line.match(/^\s*$/)).join('\n');
            }
        },
        mounted() {
            this.$signalr.on("WriteErrorLine", value => {
                if (this.dialog) {
                    this.message += '\n\n' + this.format(value);
                }
                else {
                    this.message = this.format(value);
                    this.dialog = true;
                }
            })
            this.$signalr.on("ParseError", value => {
                this.message = value;
                this.dialog = true;
            })
        }
    })
</script>

<template id="powershell-ui-log-component">
    <v-menu v-model="dialog" ref="main"
            :nudge-top="600"
            :close-on-click="false" 
            :close-on-content-click="false"
            transition="slide-y-reverse-transition">
        <template v-slot:activator="{on}">
            <button v-on="on" style="outline:none;">Log</button>
        </template>
        <div class="black d-flex flex-column" style="width: 600px; height: 600px;">
            <div style="flex: 1;"></div>
            <pre v-for="(message, index) in messages" :key="index" 
                 v-text="message.text"
                 :class="resolveColor(message)" class="pl-4 pr-4"></pre>
            <div class="black text-right" ref="bottom" style="position:sticky;bottom:0;width:100%;">
                <v-btn dark text icon v-on:click="dialog=false">
                    <v-icon>mdi-chevron-down</v-icon>
                </v-btn>
            </div>
        </div>
    </v-menu>
</template>
<script>
    Vue.component('powershelluilog', {
        template: '#powershell-ui-log-component',
        props: {
            max: {
                type: Number,
                default: 30
            }
        },
        data() {
            return {
                dialog: false,
                messages: []
            }
        },
        methods: {
            resolveColor(message) {
                const { color, bgColor } = message.color == 0 && message.bgColor == 0 ? { color: 15, bgColor: 0 } : message;
                const foregroundColors = ['black--text', 'blue--text text--darken-4', 'green--text text--darken-4', 'cyan--text text--darken-4', 'red--text text--darken-4', 'pink--text text--darken-4', 'yellow--text text--darken-4', 'grey--text', 'grey--text text--darken-4', 'blue--text', 'green--text', 'cyan--text', 'red--text', 'pink--text', 'yellow--text', 'white--text']
                const backgroudColors = ['black', 'blue darken-4', 'green darken-4', 'cyan darken-4', 'red darken-4', 'pink darken-4', 'yellow darken-4', 'grey', 'grey darken-4', 'blue', 'green', 'cyan', 'red', 'pink', 'yellow', 'white']
                return [...foregroundColors[color].split(' '), ...backgroudColors[bgColor].split(' ')]
            }
        },
        mounted() {
            this.$signalr.on("WriteWithColor", (color, bgColor, text) => {
                if (this.messages.length > this.max) {
                    this.messages.shift()
                }
                this.messages.push({color, bgColor, text})
                this.dialog = true;
                requestIdleCallback(() => {
                    this.$refs.bottom.parentElement.parentElement.scrollTo(0, this.$refs.bottom.offsetTop)
                })
            })
        }
    })
</script>

<template id="powershell-progress-component">
    <span>
        <span class="d-flex align-center" v-for="(progress, activityId) in progresses" :key="activityId" v-if="!dialog">
            {{progress.activity}}
            <v-progress-linear
                color="light-blue"
                height="10"
                striped
                :value="progress.percentComplete"
                style="width: 100px;">
            </v-progress-linear>
        </span>
        <v-dialog v-model="dialog" max-width="600px">
            <v-card>
                <v-card-text>
                    <v-list>
                        <v-list-item v-for="(progress, activityId) in progresses" :key="activityId">
                            <v-list-item-content>
                                <v-list-item-title>{{progress.activity}}</v-list-item-title>
                                <v-progress-linear
                                    color="light-blue"
                                    height="10"
                                    striped
                                    :value="progress.percentComplete">
                                </v-progress-linear>
                                <v-list-item-subtitle>{{progress.statusDescription}}: {{progress.currentOperation}}</v-list-item-subtitle>
                            </v-list-item-content>
                        </v-list-item>
                    </v-list>
                </v-card-text>
                <v-card-actions>
                    <v-spacer></v-spacer>
                    <v-btn v-on:click="close=true">CLOSE</v-btn>
                </v-card-actions>
            </v-card>
        </v-dialog>
    </span>
</template>
<script>
    Vue.component('powershellprogress', {
        template: '#powershell-progress-component',
        data() {
            return {
                close: false,
                progresses: {},
            }
        },
        computed: {
            dialog: {
                get() {
                    return this.progressesLength > 0 && !this.close;
                },
                set(value) {
                    this.close = !value;
                }
            },
            progressesLength() {
                return Object.keys(this.progresses).filter(name => !name.startsWith('_')).length;
            }
        },
        mounted() {
            this.$signalr.on('WriteProgress', (sourceId, progress) => {
                this.$set(this.progresses, progress.activityId, progress);
                if (progress.percentComplete == 100) {
                    this.$delete(this.progresses, progress.activityId);
                    if (this.progressesLength === 0) {
                        this.close = false;
                    }
                }
            })
        }
    })
</script>

<template id="powershell-status-component">
    <span>{{text}}</span>
</template>
<script>
    Vue.component('powershellstatus', {
        template: '#powershell-status-component',
        data() {
            return {
                text: null
            }
        },
        mounted() {
            this.$signalr.onclose(err => {
                this.text = "close";
            })
            this.$signalr.onreconnecting(err => {
                this.text = "reconnecting...";
            })
            this.$signalr.onreconnected(connectedId => {
                this.text = "connected";
            })
            this.$signalr.start().then(() => {
                this.text = "connected";
            }).catch(() => {
                alert("Cannot connect Powershell SignbalR.");
            })
        }
    })
</script>