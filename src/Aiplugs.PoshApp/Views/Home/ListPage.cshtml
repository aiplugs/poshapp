<template id="list-page-component">
    <div class="flex-grow-1">
        <section  style="width:calc(100vw - 56px - 256px); height: 95vh; overflow:auto;">
            <header>
                <v-row class="pl-4 pr-4">
                    <v-col cols="12">
                        <parameters-form ref="form" :script="scriptId" :page="page" :page-size="pageSize" v-on:run="run"></parameters-form>
                    </v-col>
                </v-row>
                <v-row class="pl-4 pr-4">
                    <v-btn text v-for="action in actions" :key="action.name" v-on:click="invokeAction(action.id)" retain-focus-on-click>{{action.displayName || action.id}}</v-btn>
                </v-row>
            </header>
            <hr>
            <v-data-table
                v-model="selected"
                :headers="headers"
                :items="list"
                :page.sync="page"
                :items-per-page="pageSize"
                item-key="$clixml"
                hide-default-footer
                show-select
                v-if="list.length > 0">
                <template v-slot:item.$poshapp_action="{ item }">
                    <v-btn icon text v-on:click="openDetail(item)">
                        <v-icon>mdi-fullscreen</v-icon>
                    </v-btn>
                </template>
            </v-data-table>
            <v-pagination v-model="page" :length="total" v-if="list.length > 0"></v-pagination>
        </section>
        <transition name="slide-x-reverse-transition">
            <detail-page :script="detailScriptId" :input="detailInput" v-if="detailScriptId" v-on:close="detailScriptId=null"></detail-page>
        </transition>
    </div>
</template>
<script type="module">
    import { parsePSDataCollection, createCliXml } from '/js/clixml.js'
    Vue.component('ListPage', {
        template: '#list-page-component',
        data() {
            return {
                selected:[],
                parameters: [],
                paramValues: {},
                detailScriptId: null,
                detailInput: null,
                page: 1,
                pageSize: 10,
                total: 0,
                list: [],
                headers: [],
            }
        }, 
        computed: {
            scriptId() {
                return `${this.$route.params.repo}:${this.$route.params.id}`;
            },
            detailId() {
                const { repo, id } = this.$route.params;
                const script = this.$store.getters['scripts/find'](repo, id);
                return script.detail;
            },
            actions() {
                const { repo, id } = this.$route.params;
                return this.$store.getters['scripts/findActions'](repo, id);
            }
        },
        methods: {
            ...Vuex.mapActions('toast', ['toast']),
            ...Vuex.mapMutations('list', ['updateList','replaceData','setDetail']),
            init() {
                this.$signalr.on("DefaultResult", json => {
                    const data = parsePSDataCollection(JSON.parse(json));
                    
                    if (data.length == 0)
                        return;

                    let index = 0;
                    let total = data.length;
                    const pageSize = this.pageSize - 0;

                    if (typeof data[index].value === 'number') {
                        total = data[index].value;
                        index++;
                    }

                    const pageCount = ~~(total / pageSize) + Math.min(1, total % pageSize);

                    const dataset = data.slice(index);

                    const allKeys = Object.keys(dataset.reduce((o,d) => Object.assign(o,d.value),{}));
                    
                    const headers = allKeys.map(key => ({ text:key, value:key, sortable: false }));
                    
                    if (this.detailId) {
                        headers.unshift({text: '', value: '$poshapp_action', width: 64, sortable: false });
                    }

                    this.pageSize = this.$refs.form.getPageSize();
                    this.total = pageCount;
                    this.headers.splice(0, this.headers.length, ...headers);
                    this.list.splice(0, this.list.length, ...dataset.filter(d => typeof d.value == 'object').map(d => {
                        d.value.$clixml = d.clixml;
                        return d.value;
                    }));
                })
                this.$signalr.on("ActionResult", (id, json) => {
                    const data = JSON.parse(json);
                    this.toast({
                        text: `${id} is succeeded` ,
                        color: "info",
                        top: true,
                        right: true
                    });
                })
            },
            run(value) {
                this.$signalr.invoke('Invoke', this.scriptId, value);
            },
            invokeAction(name) {
                this.$signalr.invoke('InvokeAction', name, this.selected.map(item => item.$clixml));
            },
            openDetail(item) {
                const clixml = item.$clixml;
                this.detailInput = clixml;
                this.detailScriptId = this.detailId;
            }
        },
        mounted() {
            this.init();
        },
        beforeRouteUpdate (to, from, next) {
            this.init();  
            next();
        },
        beforeRouteLeave (to, from , next) {
            this.$signalr.off('DefaultResult');
            this.$signalr.off('ActionResult');
            next();
        }
    })
</script>