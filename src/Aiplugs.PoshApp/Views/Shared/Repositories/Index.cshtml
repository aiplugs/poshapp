<template id="repository-component">
    <div class="flex-grow-1">
        <v-btn text color="primary" v-on:click="handleOpen">Open Directory</v-btn>
        <v-btn text color="primary" v-on:click="handleRefresh">Refresh</v-btn>
        <v-btn text color="primary" :disabled="!updatable" v-on:click="handleUpdate">Update</v-btn>
        <v-dialog v-model="resetDialog" width="600" v-if="modified">
            <template v-slot:activator="{on}">
                <v-btn text color="primary" v-on="on">
                    Remove Modified <v-chip x-small color="primary">{{gitStatus.length}}</v-chip>
                </v-btn>
            </template>
            <v-card>
                <v-card-title>
                    Remove modified
                </v-card-title>
                <v-card-text>
                    <table>
                        <tbody>
                            <tr v-for="(item, index) in gitStatus" :key="index">
                                <td>{{item.state}}</td>
                                <td>{{item.script}}</td>
                            </tr>
                        </tbody>
                    </table>
                </v-card-text>
                <v-card-actions>
                    <v-spacer></v-spacer>
                    <v-btn text v-on:click="resetDialog=false">Cancel</v-btn>
                    <v-btn text color="error" v-on:click="handleReset">Remove Modified</v-btn>
                </v-card-actions>
            </v-card>
        </v-dialog>
        <span v-if="gitLogMessage">{{gitLogMessage}}</span>
        <v-data-table :headers="headers" :items="gitLog.logs" item-key="commit" single-expand show-expand hide-default-footer v-if="gitLog != null">
            <template v-slot:item.tag="{item}">
                <v-chip v-if="item.commit == gitLog.origin" color="primary">ORIGIN</v-chip>
                <v-chip v-if="item.commit == gitLog.local">LOCAL</v-chip>
            </template>
            <template v-slot:item.commit="{item}">
                {{item.commit.substring(0,7)}}
            </template>
            <template v-slot:item.author="{item}">
                {{item.name}} <{{item.email}}>
            </template>
            <template v-slot:item.when="{item}">
                {{new Date(item.when).toLocaleString()}}
            </template>
            <template v-slot:expanded-item="{ headers, item }">
                <td :colspan="headers.length">
                    <pre>{{item.message}}</pre>
                </td>
            </template>
        </v-data-table>
    </div>
</template>
<script>
    Vue.component('Repository', {
        template: '#repository-component',
        data() {
            return {
                expanded: [],
                headers: [
                    { text: '', value: 'tag', sortable: false },
                    { text: 'Commit', value: 'commit', sortable: false },
                    { text: 'Message', value: 'messageShort', sortable: false },
                    { text: '', value: 'data-table-expand' },
                    { text: 'Author', value: 'author', sortable: false },
                    { text: 'Time', value: 'when', sortable: false },
                ],
                resetDialog: false,
            }
        },
        computed: {
            ...Vuex.mapState('signalr', ['gitLog', 'gitLogMessage', 'gitStatus']),
            updatable() {
                return this.gitLog
                    && this.gitLog.name == this.$route.params.id
                    && this.gitLog.origin != this.gitLog.local
                    && this.gitLog.logs.findIndex(item => item.commit == this.gitLog.origin) < this.gitLog.logs.findIndex(item => item.commit == this.gitLog.local)
            },
            modified() {
                return this.gitStatus.length > 0;
            }
        },
        methods: {
            ...Vuex.mapActions('signalr', ['invokeGitLog', 'invokeGitForcePull', 'invokeGitReset']),
            ...Vuex.mapActions('ipc', ['openRepositoryDir']),
            getLog(repositoryName) {
                this.invokeGitLog({ repositoryName });
            },
            handleOpen() {
                this.openRepositoryDir({ repositoryName: this.$route.params.id });
            },
            handleRefresh() {
                this.getLog(to.params.id);
            },
            handleUpdate() {
                this.invokeGitForcePull({ repositoryName: this.$route.params.id });
            },
            handleReset() {
                this.invokeGitReset({ repositoryName: this.$route.params.id });
            }
        },
        mounted() {
            this.getLog(this.$route.params.id);
        },
        beforeRouteUpdate (to, from, next) {
            this.getLog(to.params.id);
            next();
        },
    })
</script>