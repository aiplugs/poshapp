<template id="scripts-component">
    <div style="position: absolute; width: 100%; height: 100%;" v-resize="handleResize">
        <div>
            <v-btn text v-on:click="save" :disabled="!editor">Save</v-btn>
            <v-btn text v-on:click="gotoApp">Goto App</v-btn>
        </div>
        <div ref="editor" class="fill-height"></div>
    </div>
</template>
<script>
    Vue.component('Scripts', {
        template: '#scripts-component',
        data() {
            return {
                editor: null,
                content: null
            }
        },
        methods: {
            ...Vuex.mapActions('toast', ['toast']),
            async loadScriptContent(repo, id) {
                var response = await fetch(`/api/repositories/${repo}/scripts/${id}/content`);
                if (response.ok) {
                    return await response.text();
                }
                return '';
            },
            async saveScriptContent(repo, id, content) {
                var response = await fetch(`/api/repositories/${repo}/scripts/${id}/content`, { method: 'put', headers: { 'Content-Type': 'text/plain' }, body: content });
                if (response.ok) {
                }
            },
            async createEditor() {
                this.content = await this.loadScriptContent(this.$route.params.repo, this.$route.params.id);
                this.editor = monaco.editor.create(this.$refs.editor, {
                    value: this.content,
                    language: 'powershell',
                    fontSize: 16,
                });
                this.editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, () => {
                    const value = this.editor.getModel().getValue();
                    this.saveScriptContent(this.$route.params.repo, this.$route.params.id, value).then(_ => {
                        this.content = value;
                        this.toast({
                            text: "Saved",
                            color: "success",
                            top: true,
                            right: true
                        });
                    })
                })
            }, 
            async changeContent(repository, id) {
                if (this.editor) {
                    const content = await this.loadScriptContent(repository, id);
                    this.editor.getModel().setValue(content);
                    this.content = content;
                }
            },
            confirmLeave() {
                if (this.editor == null)
                    return true;
                
                const value = this.editor.getModel().getValue();

                if (this.content == value)
                    return true;

                return confirm("Are you sure you want to leave?");
            },
            handleResize() {
                if (this.editor) {
                    this.editor.layout();
                }
            },
            async save() {
                const value = this.editor.getModel().getValue();
                await this.saveScriptContent(this.$route.params.repo, this.$route.params.id, value);
                this.toast({
                    text: "Saved",
                    color: "success",
                    top: true,
                    right: true
                });
            },
            gotoListFromDetail(repo, id) {
                const page = this.$store.getters['scripts/findPageByDetail'](repo, id);
                if (page) {
                    this.$router.push(`/${page.type.toLowerCase()}/${page.repository}/${page.id}`);
                }
            },
            gotoPageFromAction(repo, id) {
                const page = this.$store.getters['scripts/findPageByAction'](repo, id);
                if (page) {
                    if (page.type === 'Detail') {
                        this.gotoListFromDetail(page.repository, page.id);
                    }
                    else {
                        this.$router.push(`/${page.type.toLowerCase()}/${page.repository}/${page.id}`);
                    }
                }
            },
            gotoApp() {
                const { repo, id } = this.$route.params;
                const script = this.$store.getters['scripts/find'](repo, id);

                if (['List', 'Singleton'].includes(script.type)) {
                    this.$router.push(`/${script.type.toLowerCase()}/${repo}/${id}`);
                }
                else if (script.type === 'Detail') {
                    this.gotoListFromDetail(repo, id);
                }
                else if (script.type === 'Action') {
                    this.gotoPageFromAction(repo, id);
                }
            }
        },
        mounted() {
            this.createEditor();
        },
        async beforeRouteUpdate(to, from, next) {
            if (this.content != null && !this.confirmLeave())
                return;

            next();
            await this.changeContent(to.params.repo, to.params.id);
        },
        beforeRouteLeave (to, from , next) {
            if (this.confirmLeave())
                next();
        }
    })
</script>