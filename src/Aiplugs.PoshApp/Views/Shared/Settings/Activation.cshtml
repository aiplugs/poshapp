<template id="activation-component">
    <div class="main-content overflow-y-auto no-scrollbar pa-8">
        <div v-if="status==='Valid'">
            <h1>Already activated!</h1>
            <p>Thank you for your support :)</p>
        </div>
        <div v-else-if="status==='NotMatch'">
            <h1>Computer Name or MAC Address is not match</h1>
            <p>Please reactivate machine.</p>
            <v-textarea label="Activation Request Code" v-model="requestCode" readonly auto-grow rows="3" v-on:click="copyRequestCode"></v-textarea>
            <v-form v-model="valid">
                <v-text-field label="Activation Code" v-model="activationCode" :rules="[v => !!v || 'Activation Code is required']"></v-text-field>
                <v-btn color="primary" block v-on:click="activation" :disabled="!valid" :loading="loading">Register Activation Code</v-btn>
            </v-form>
        </div>
        <div v-else-if="status==='Expired'">
            <h1>Expired</h1>
            <p>Please reflesh or reactivate</p>
            <v-btn color="primary" v-on:click="reflesh">Reflesh</v-btn>
            <v-btn text v-on:click="show=true">Reactivate</v-btn>
            <v-expand-transition>
                <div v-if="show">
                    <v-textarea label="Activation Request Code" v-model="requestCode" readonly auto-grow rows="3" v-on:click="copyRequestCode"></v-textarea>
                    <v-form v-model="valid">
                        <v-text-field label="Activation Code" v-model="activationCode" :rules="[v => !!v || 'Activation Code is required']"></v-text-field>
                        <v-btn color="primary" block v-on:click="activation" :disabled="!valid" :loading="loading">Register Activation Code</v-btn>
                    </v-form>
                </div>
            </v-expand-transition>
        </div>
        <div v-else-if="status==='Illigal'">
            <h1>Activation code is illigal</h1>
            <p>Please try reactivation machine.</p>
            <v-textarea label="Activation Request Code" v-model="requestCode" readonly auto-grow rows="3" v-on:click="copyRequestCode"></v-textarea>
            <v-form v-model="valid">
                <v-text-field label="Activation Code" v-model="activationCode" :rules="[v => !!v || 'Activation Code is required']"></v-text-field>
                <v-btn color="primary" block v-on:click="activation" :disabled="!valid" :loading="loading">Register Activation Code</v-btn>
            </v-form>
        </div>
        <div v-else-if="status==='None'">
            <v-card :max-width="400">
                <v-card-title>
                    PRO Plan
                </v-card-title>
                <v-card-text>
                    <v-row align="center">
                        <v-col class="display-3" cols="6">
                            $ 1.49
                        </v-col>
                        <v-col>
                            / month・machine
                        </v-col>
                    </v-row>
                    <ul>
                        <li>Unlimited repositories</li>
                        <li>Unlimites scripts</li>
                    </ul>
                </v-card-text>
                <v-card-actions>
                    <v-btn color="primary" block text v-on:click="show=true">
                        <v-icon>mdi-cart-outline</v-icon>
                        Activate
                    </v-btn>
                </v-card-actions>
                <v-expand-transition>
                    <div v-show="show">
                        <v-divider></v-divider>
                        <v-card-text>
                            <h5>Step 1 </h5>
                            <p><a v-on:click="openEx"><v-icon x-small>mdi-open-in-new</v-icon>Open license page</a> and signup &amp; checkout pro plan.</p>
                            <h5>Step 2</h5>
                            <p>Copy activation request code</p>
                            <v-textarea label="Activation Request Code" v-model="requestCode" readonly auto-grow rows="3" v-on:click="copyRequestCode"></v-textarea>
                            <h5>Step 3</h5>
                            <p>Register activation request code and get activation code on <a v-on:click="openEx"><v-icon x-small>mdi-open-in-new</v-icon>license page</a></p>
                            <h5>Final</h5>
                            <v-form v-model="valid">
                                <v-text-field label="Activation Code" v-model="activationCode" :rules="[v => !!v || 'Activation Code is required']"></v-text-field>
                                <v-btn color="primary" block v-on:click="activation" :disabled="!valid" :loading="loading">Register Activation Code</v-btn>
                            </v-form>
                        </v-card-text>
                    </div>
                </v-expand-transition>
            </v-card>
        </div>
    </div>
</template>
<script>
    Vue.component('Activation', {
        template: '#activation-component',
        data() {
            return {
                show: false,
                valid: false,
                loading: false,
                status: null,
                requestCode: null,
                activationCode: null,
            }
        },
        methods: {
            ...Vuex.mapActions('toast', ['toast']),
            async loadStatus() {
                const response = await fetch('/api/activation');
                if (response.ok) {
                    var data = await response.json();
                    //this.status = data.status;
                    this.status = "Expired";
                    this.requestCode = data.requestCode;
                }
            },
            openEx() {
                ipcRenderer.send("open-activation");
            },
            async reflesh() {
                this.loading = true;
                const response = await fetch('/api/reflesh', {
                    method: 'post'
                });
                this.loading = false;
                if (response.ok) {
                    var data = await response.json();

                    if (data.status !== 'Illigal') {
                        this.status = data.status;
                        this.requestCode = data.requestCode;
                    }
                    else {
                        this.toast({
                            text: "Invalid activation code",
                            color: "error",
                            bottom: true
                        });
                    }
                }
                else {
                    this.toast({
                        text: "Connection Error",
                        color: "error",
                        bottom: true
                    });
                }
            },
            async activation() {
                this.loading = true;
                const response = await fetch('/api/activation', {
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ activationCode: this.activationCode })
                });
                this.loading = false;
                if (response.ok) {
                    var data = await response.json();

                    if (data.status !== 'Illigal') {
                        this.status = data.status;
                        this.requestCode = data.requestCode;
                    }
                    else {
                        this.toast({
                            text: "Invalid activation code",
                            color: "error",
                            bottom: true
                        });
                    }
                }
                else {
                    this.toast({
                        text: "Activation Code is required",
                        color: "error",
                        bottom: true
                    });
                }
            },
            async copyRequestCode() {
                await ipcRenderer.send("copy-to", this.requestCode);
                alert("Copied!");
            }
        },
        mounted() {
            this.loadStatus();
        }
    })
</script>