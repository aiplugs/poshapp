<template id="singleton-page-component">
    <div class="main-content">
        <header>
            <v-row class="pl-4 pr-4" style="width: 100%;">
                <v-col cols="12" class="pt-0 pb-0">
                    <parameters-form ref="form" :script="scriptId" :loading="loading=='$run'" :disabled="disabled" v-on:run="run"></parameters-form>
                </v-col>
            </v-row>
            <v-row class="pl-4 pr-4">
                <v-btn text v-for="action in actions" :key="action.name" :loading="loading==action.id" :disabled="disabled" v-on:click="invokeAction(action.id)" retain-focus-on-click>{{action.displayName || action.id}}</v-btn>
            </v-row>
        </header>
        <v-divider></v-divider>
        <div class="flex scroll-content">
            <data-viewer :data="data"></data-viewer>
        </div>
    </div>
</template>
<script type="module">
    import { parsePSDataCollection } from '/js/clixml.js'
    Vue.component('SingletonPage', {
        template: '#singleton-page-component',
        data() {
            return {
                data: null,
                loading: null
            }
        }, 
        computed: {
            scriptId() {
                return `${this.$route.params.repo}:${this.$route.params.id}`;
            },
            actions() {
                const { repo, id } = this.$route.params;
                return this.$store.getters['scripts/findActions'](repo, id);
            },
            disabled() {
                return !!this.loading
            }
        },
        methods: {
            ...Vuex.mapActions('toast', ['toast']),
            init() {
                this.data = null;
                this.$signalr.on('DefaultResult', json => {
                    this.loading = null;
                    this.data = parsePSDataCollection(JSON.parse(json));
                });
                this.$signalr.on("ActionResult", (id, json) => {
                    this.loading = null;
                    const data = JSON.parse(json);
                    this.toast({
                        text: `${id} is succeeded` ,
                        color: "info",
                        top: true,
                        right: true
                    });
                })
            },
            run(value) {
                this.loading = '$run';
                this.$signalr.invoke('Invoke', this.scriptId, value);
            },
            invokeAction(id) {
                this.loading = id;
                this.$signalr.invoke('InvokeAction', id, null);
            }
        },
        mounted() {
            this.init();
        },
        beforeRouteUpdate (to, from, next) {
            this.init();  
            next();
        },
        beforeRouteLeave (to, from , next) {
            this.$signalr.off('DefaultResult');
            next();
        }
    })
</script>   