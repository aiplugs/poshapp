<template id="parameters-form">
    <v-form v-model="valid">
        <v-row>
            <v-col class="pb-0" v-for="p in parameters" :key="p.name" :md="colSize(p)">
                <datetime-field
                    v-model="p.value" 
                    :label="p.name"
                    :hint="p.helpMessage"
                    :rules="rules(p)"
                    :disabled="disabledAll"
                    filled rounded dense
                    v-if="p.type == 'System.DateTimeOffset' || p.type == 'System.DateTime'">
                </datetime-field>
                <v-select
                    v-model="p.value"
                    :label="p.name"
                    :hint="p.helpMessage"
                    :items="validateSet(p)"
                    v-else-if="p.validateSet">
                </v-select>
                <v-text-field 
                    v-model="p.value" 
                    :label="p.name" 
                    :hint="p.helpMessage"
                    :type="inputType(p)" 
                    :rules="rules(p)" 
                    :disabled="disabledAll"
                    filled rounded dense v-else></v-text-field>
            </v-col>
            <v-col class="pb-0" v-if="loadingParams">
                <v-text-field filled rounded dense disabled></v-text-field>
            </v-col>
            <v-col class="pb-0" style="height:92px;" v-if="!loadingParams&&(parameters.length==0||parameters.every(p => isNumberType(p.type)))">
            </v-col>
            <div class="pa-3 pb-0">
                <v-btn text x-large :disabled="disabledAll||!valid" :loading="loading" v-on:click="emitRun">Run</v-btn>
            </div>
        </v-row>
    </v-form>
</template>
<script type="module">
    import { createCliXml } from '/js/clixml.js'
    Vue.component('ParametersForm', {
        template: '#parameters-form',
        props: {
            script: String,
            page: Number,
            pageSize: Number,
            disabled: Boolean,
            loading: Boolean
        },
        data() {
            return {
                loadingParams: true, 
                parameters: [],
                valid: true,
            }
        },
        computed: {
            disabledAll() {
                return this.disabled || this.loadingParams
            }
        },
        watch: {
            page(value) {
                this.setPage(value);
                this.emitRun();
            },
            pageSize(value) {
                this.setPageSize(value);
                this.emitRun();
            },
            script() {
                this.getParameters();
            }
        },
        methods: {
            setPage(value) {
                const p = this.parameters.find(p => p.name == 'Page');
                if (p) {
                    this.$set(p, 'value', value - 1);
                }
            },
            setPageSize(value) {
                const p = this.parameters.find(p => p.name == 'PageSize');
                if (p) {
                    this.$set(p, 'value', value);
                }
            },
            isNumberType(type) {
                const numberTypes = ['System.Int32','System.Int64','System.Single','System.Double','System.Decimal'];
                return numberTypes.includes(type);
            },
            inputType(parameter) {
                const numberTypes = ['System.Int32','System.Int64','System.Single','System.Double','System.Decimal'];
                if (numberTypes.includes(parameter.type)) {
                    return 'number';
                }
                return 'text';
            },
            rules(parameter) {
                const rules = [];
                const optional = function (f) {
                    return v => v === null || v === undefined || f(v);
                }

                if (parameter.mandatory)
                    rules.push(v => !!v || `${parameter.name} is required.`);

                if (parameter.type == 'System.Int32'
                 || parameter.type == 'System.Int64')
                    rules.push(optional(v => !isNaN(parseInt(v)) || `${parameter.name} need integer value`))

                if (parameter.type == 'System.Float'
                 || parameter.type == 'System.Double'
                 || parameter.type == 'System.Decimal')
                    rules.push(optional(v => !isNaN(parseFloat(v)) || `${parameter.name} need number value`))

                if (parameter.validateLength != null && parameter.validateLength.length == 2)
                    rules.push(optional(v => v && parameter.validateLength[0] <= v.length && v.length <= parameter.validateLength[1] || `${parameter.name} must be a string with a length between ${parameter.validateLength[0]} and ${parameter.validateLength[1]}.`))

                if (parameter.validateRange != null && parameter.validateRange.length == 2)
                    rules.push(optional(v => parameter.validateRange[0] <= v && v <= parameter.validateRange[1] || `${parameter.name} need a number between ${parameter.validateRange[0]} and ${parameter.validateRange[1]}`))

                if (parameter.validatePattern != null)
                    rules.push(optional(v => new RegExp(parameter.validatePattern).test(v) || `${parameter.name} need ${parameter.validatePattern}`))

                return rules;
            },
            colSize(parameter) {
                return this.isNumberType(parameter.type) || parameter.validateSet ? 2 : null;
            },
            validateSet(parameter) {
                return parameter.validateSet.map(v => ({ text: v, value: v }));
            },
            getClixmls() {
                return this.parameters.reduce((o, p) => {
                    if (p.value !== undefined) {
                        o[p.name] = createCliXml(p.type, p.value);
                    }
                    return o;
                }, {});
            },
            getPageSize() {
                const p = this.parameters.find(p => p.name == 'PageSize');
                return p ? parseInt(p.value) : null;
            },
            emitRun() {
                this.$emit('run', this.getClixmls());
            },
            getParameters() {
                this.loadingParams = true;
                this.$signalr.invoke('GetParameters', this.script);
            }
        },
        mounted() {
            this.$signalr.on("GetParameters", parameters => {
                this.parameters.splice(0, this.parameters.length, ...parameters);
                this.setPage(this.page);
                this.setPageSize(this.pageSize);
                this.loadingParams = false;
            })
            this.$signalr.onconnected(() => {
                this.getParameters();
            })
        },
        beforeDestroy() {
            this.$signalr.off('DetailResult')
        }
    })
</script>